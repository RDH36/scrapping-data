Skip to content
Showcase
Docs
Blog
Templates
Enterprise
Search documentation...
Feedback
Learn

Using App Router

Features available in /app

Using Stable Version

v15.0.2

Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages
Layouts and Templates
Linking and Navigating
Error Handling
Loading UI and Streaming
Redirecting
Route Groups
Project Organization
Dynamic Routes
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Internationalization
Data Fetching
Data Fetching and Caching
Server Actions and Mutations
Incremental Static Regeneration (ISR)
Rendering
Server Components
Client Components
Composition Patterns
Partial Prerendering
Runtimes
Caching
Styling
CSS
Tailwind CSS
Sass
CSS-in-JS
Optimizing
Images
Videos
Fonts
Metadata
Scripts
Package Bundling
Lazy Loading
Analytics
Instrumentation
OpenTelemetry
Static Assets
Third Party Libraries
Memory Usage
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Custom Server
Draft Mode
Content Security Policy
Debugging
Progressive Web Applications (PWA)
Testing
Vitest
Jest
Playwright
Cypress
Authentication
Deploying
Production Checklist
Static Exports
Multi-Zones
Upgrading
Codemods
Version 15
Version 14
App Router Migration
Migrating from Create React App
Migrating from Vite
Examples
API Reference
Directives
use cache
use client
use server
Components
Font
<Form>
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
instrumentation.js
layout.js
loading.js
mdx-components.js
middleware.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cacheTag
connection
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_after
unstable_rethrow
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
cacheLife
compress
crossOrigin
cssChunking
devIndicators
distDir
dynamicIO
env
eslint
expireTime
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
cacheHandler
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
poweredByHeader
ppr
productionBrowserSourceMaps
reactCompiler
reactMaxHeadersLength
reactStrictMode
redirects
rewrites
sassOptions
serverActions
serverComponentsHmrCache
serverExternalPackages
staleTimes
staticGeneration*
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
useLightningcss
webpack
webVitalsAttribution
CLI
create-next-app
next CLI
Edge Runtime
Legacy APIs
unstable_cache
unstable_noStore
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Getting Started
Google Third-Parties
Google Tag Manager
Sending Events
Server-side Tagging
Options
Google Analytics
Sending Events
Tracking Pageviews
Options
Google Maps Embed
Options
YouTube Embed
Options
Managed Next.js (Vercel)
Scroll to top
Building Your Application
Optimizing
Third Party Libraries
Third Party Libraries

@next/third-parties is a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application.

All third-party integrations provided by @next/third-parties have been optimized for performance and ease of use.

Getting Started

To get started, install the @next/third-parties library:

Terminal
npm install @next/third-parties@latest next@latest

@next/third-parties is currently an experimental library under active development. We recommend installing it with the latest or canary flags while we work on adding more third-party integrations.

Google Third-Parties

All supported third-party libraries from Google can be imported from @next/third-parties/google.

Google Tag Manager

The GoogleTagManager component can be used to instantiate a Google Tag Manager
 container to your page. By default, it fetches the original inline script after hydration occurs on the page.

To load Google Tag Manager for all routes, include the component directly in your custom _app and pass in your GTM container ID:

pages/_app.js
import { GoogleTagManager } from '@next/third-parties/google'
 
export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <GoogleTagManager gtmId="GTM-XYZ" />
    </>
  )
}

To load Google Tag Manager for a single route, include the component in your page file:

pages/index.js
import { GoogleTagManager } from '@next/third-parties/google'
 
export default function Page() {
  return <GoogleTagManager gtmId="GTM-XYZ" />
}
Sending Events

The sendGTMEvent function can be used to track user interactions on your page by sending events using the dataLayer object. For this function to work, the <GoogleTagManager /> component must be included in either a parent layout, page, or component, or directly in the same file.

pages/index.js
import { sendGTMEvent } from '@next/third-parties/google'
 
export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })}
      >
        Send Event
      </button>
    </div>
  )
}

Refer to the Tag Manager developer documentation
 to learn about the different variables and events that can be passed into the function.

Server-side Tagging

If you're using a server-side tag manager and serving gtm.js scripts from your tagging server you can use gtmScriptUrl option to specify the URL of the script.

Options

Options to pass to the Google Tag Manager. For a full list of options, read the Google Tag Manager docs
.

Name	Type	Description
gtmId	Required	Your GTM container ID. Usually starts with GTM-.
gtmScriptUrl	Optional	GTM script URL. Defaults to https://www.googletagmanager.com/gtm.js.
dataLayer	Optional	Data layer object to instantiate the container with.
dataLayerName	Optional	Name of the data layer. Defaults to dataLayer.
auth	Optional	Value of authentication parameter (gtm_auth) for environment snippets.
preview	Optional	Value of preview parameter (gtm_preview) for environment snippets.
Google Analytics

The GoogleAnalytics component can be used to include Google Analytics 4
 to your page via the Google tag (gtag.js). By default, it fetches the original scripts after hydration occurs on the page.

Recommendation: If Google Tag Manager is already included in your application, you can configure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to the documentation
 to learn more about the differences between Tag Manager and gtag.js.

To load Google Analytics for all routes, include the component directly in your custom _app and pass in your measurement ID:

pages/_app.js
import { GoogleAnalytics } from '@next/third-parties/google'
 
export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <GoogleAnalytics gaId="G-XYZ" />
    </>
  )
}

To load Google Analytics for a single route, include the component in your page file:

pages/index.js
import { GoogleAnalytics } from '@next/third-parties/google'
 
export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
Sending Events

The sendGAEvent function can be used to measure user interactions on your page by sending events using the dataLayer object. For this function to work, the <GoogleAnalytics /> component must be included in either a parent layout, page, or component, or directly in the same file.

pages/index.js
import { sendGAEvent } from '@next/third-parties/google'
 
export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })}
      >
        Send Event
      </button>
    </div>
  )
}

Refer to the Google Analytics developer documentation
 to learn more about event parameters.

Tracking Pageviews

Google Analytics automatically tracks pageviews when the browser history state changes. This means that client-side navigations between Next.js routes will send pageview data without any configuration.

To ensure that client-side navigations are being measured correctly, verify that the “Enhanced Measurement”
 property is enabled in your Admin panel and the “Page changes based on browser history events” checkbox is selected.

Note: If you decide to manually send pageview events, make sure to disable the default pageview measurement to avoid having duplicate data. Refer to the Google Analytics developer documentation
 to learn more.

Options

Options to pass to the <GoogleAnalytics> component.

Name	Type	Description
gaId	Required	Your measurement ID
. Usually starts with G-.
dataLayerName	Optional	Name of the data layer. Defaults to dataLayer.
nonce	Optional	A nonce.
Google Maps Embed

The GoogleMapsEmbed component can be used to add a Google Maps Embed
 to your page. By default, it uses the loading attribute to lazy-load the embed below the fold.

pages/index.js
import { GoogleMapsEmbed } from '@next/third-parties/google'
 
export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey="XYZ"
      height={200}
      width="100%"
      mode="place"
      q="Brooklyn+Bridge,New+York,NY"
    />
  )
}
Options

Options to pass to the Google Maps Embed. For a full list of options, read the Google Map Embed docs
.

Name	Type	Description
apiKey	Required	Your api key.
mode	Required	Map mode

height	Optional	Height of the embed. Defaults to auto.
width	Optional	Width of the embed. Defaults to auto.
style	Optional	Pass styles to the iframe.
allowfullscreen	Optional	Property to allow certain map parts to go full screen.
loading	Optional	Defaults to lazy. Consider changing if you know your embed will be above the fold.
q	Optional	Defines map marker location. This may be required depending on the map mode.
center	Optional	Defines the center of the map view.
zoom	Optional	Sets initial zoom level of the map.
maptype	Optional	Defines type of map tiles to load.
language	Optional	Defines the language to use for UI elements and for the display of labels on map tiles.
region	Optional	Defines the appropriate borders and labels to display, based on geo-political sensitivities.
YouTube Embed

The YouTubeEmbed component can be used to load and display a YouTube embed. This component loads faster by using lite-youtube-embed
 under the hood.

pages/index.js
import { YouTubeEmbed } from '@next/third-parties/google'
 
export default function Page() {
  return <YouTubeEmbed videoid="ogfYd705cRs" height={400} params="controls=0" />
}
Options
Name	Type	Description
videoid	Required	YouTube video id.
width	Optional	Width of the video container. Defaults to auto
height	Optional	Height of the video container. Defaults to auto
playlabel	Optional	A visually hidden label for the play button for accessibility.
params	Optional	The video player params defined here
.
Params are passed as a query param string.
Eg: params="controls=0&start=10&end=30"
style	Optional	Used to apply styles to the video container.
Previous
OpenTelemetry
Next
Configuring

Was this helpful?

supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Next.js Commerce
Contact Sales
GitHub
Releases
Telemetry
Governance
About Vercel
Next.js + Vercel
Open Source Software
GitHub
X
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter

Stay updated on new releases and features, guides, and case studies.

Subscribe

© 2024 Vercel, Inc.